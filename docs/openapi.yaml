openapi: 3.0.0
servers:
  - url: http://127.0.0.1:8010/v1
    description: Default server
info:
  description: ""
  version: 1.0.0
  title: Swagger FavorDAO
  termsOfService: 'https://favordao.favorlabs.io/'
tags:
  - name: POST
    description: Everything about your post
  - name: DAO
    description: Access to DAO
  - name: USER
    description: Operations about user
  - name: Redpacket
    description: redpacket about user
x-tagGroups:
  - name: General
    tags:
      - POST
      - DAO
      - Redpacket
  - name: User Management
    tags:
      - USER
paths:
  /redpacket:
    post:
      tags:
        - Redpacket
      summary: create a redpacket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - title
                - amount
                - total
                - auth
              properties:
                auth:
                  $ref: '#/components/schemas/AuthByWallet'
                type:
                  type: integer
                  enum:
                    - 0
                    - 1
                  description: 0 lucked 1 average
                title:
                  type: string
                amount:
                  type: string
                  description: String of bigint, If type is equal to 1, it means the amount of single red packet
                total:
                  type: integer
      responses:
        '200':
          description: success
      security:
        - api_key: []
  /redpacket/{redpacket_id}:
    post:
      tags:
        - Redpacket
      summary: claim a redpacket
      parameters:
        - name: redpacket_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
      security:
        - api_key: []
    get:
      tags:
        - Redpacket
      summary: get a redpacket info
      parameters:
        - name: redpacket_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
      security:
        - api_key: [ ]

  /redpacket/stats/claims:
    get:
      tags:
        - Redpacket
      summary: stats for user claims
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: number
          example: 2023
      responses:
        '200':
          description: success
      security:
        - api_key: [ ]

  /redpacket/stats/sends:
    get:
      tags:
        - Redpacket
      summary: stats for user sends
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: number
          example: 2023
      responses:
        '200':
          description: success
      security:
        - api_key: [ ]

  /redpacket/sends:
    get:
      tags:
        - Redpacket
      summary: send packets list for my
      parameters:
        - name: page
          in: query
          schema:
            type: number
        - name: page_size
          in: query
          schema:
            type: number
        - name: year
          in: query
          required: true
          schema:
            type: number
          example: 2023
      responses:
        '200':
          description: success
      security:
        - api_key: [ ]

  /redpacket/claims:
    get:
      tags:
        - Redpacket
      summary: claim packets list for my
      parameters:
        - name: page
          in: query
          schema:
            type: number
        - name: page_size
          in: query
          schema:
            type: number
        - name: year
          in: query
          required: true
          schema:
            type: number
          example: 2023
        - name: redpacket_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success
      security:
        - api_key: [ ]

  /post:
    post:
      tags:
        - POST
      summary: Add a new post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - dao_id
                - type
                - visibility
              properties:
                dao_id:
                  type: string
                  example: 643508d47408f36e6595087a
                type:
                  type: integer
                  enum:
                    - 0
                    - 1
                    - 2
                    - 3
                  description: 0 SMS, 1 VIDEO, 2 Retweet, 3 RetweetComment
                visibility:
                  enum:
                    - 0
                    - 1
                    - 2
                  description: 0 draft, 1 public, 2 private
                  type: integer
                tags:
                  type: array
                  description: "string of tag"
                member:
                  enum:
                    - 0
                    - 1
                  default: 0
                  description: "0 not member, 1 member1; If this post requires a subscription to access, please fill in 1"
                  type: integer
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []

    get:
      tags:
        - POST
      summary: Get a post
      parameters:
        - name: id
          in: query
          description: id of post
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []

  /posts:
    get:
      tags:
        - POST
      summary: Post list
      parameters:
        - name: query
          in: query
          description: address,title,content of post
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: -1 DAO, post(All but DAO), 0 SMS 1 VIDEO ;Multiple commas can be used to separate
          required: false
          schema:
            type: string
        - name: tag
          in: query
          required: false
          schema:
            type: string
        - name: address
          in: query
          required: false
          schema:
            type: string
        - name: daoId
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          example: "dao_follow_count:desc,created_on:desc"
          schema:
            type: string

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
      security:
        - api_key: []

  /dao:
    get:
      tags:
        - DAO
      summary: Get a DAO
      parameters:
        - name: dao_id
          in: query
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: [ ]

    post:
      tags:
        - DAO
      summary: Create a DAO
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                introduction:
                  type: string
                visibility:
                  type: integer
                  enum:
                    - 0
                    - 1
                  description: "0 public, 1 private"
                avatar:
                  type: string
                banner:
                  type: string
                price:
                  type: string
                  default: "10000"
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: [ ]

    put:
      tags:
        - DAO
      summary: Update a DAO
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                name:
                  type: string
                introduction:
                  type: string
                visibility:
                  type: integer
                  enum:
                    - 0
                    - 1
                  description: "0 public, 1 private"
                avatar:
                  type: string
                banner:
                  type: string
                price:
                  type: string
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: [ ]

  /dao/sub/{dao_id}:
    post:
      tags:
        - DAO
      summary: Subscribe a DAO
      parameters:
        - name: dao_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthByWallet'
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: [ ]

  /auth/login:
    post:
      tags:
        - USER
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthByWallet'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid sign supplied

  /account:
    delete:
      tags:
        - USER
      summary: Delete a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthByWallet'
      responses:
        '200':
          description: successful operation
      security:
        - api_key: []

  /user/info:
    get:
      tags:
        - USER
      summary: Get user info
      parameters:
        - name: user_address
          in: query
          description: The user address for login
          required: false
          schema:
            type: string
      responses:
        200:
          description: successful operation
      security:
        - api_key: []

  /user/accounts:
    get:
      tags:
        - USER
      summary: Get accounts for user
      responses:
        200:
          description: successful operation
          content:
            application/json:
              example: {
                "code": 0,
                "data": [
                  {
                    "asset": "FAVT",
                    "balance": "889801",
                    "frozen": "0"
                  }
                ],
                "msg": "success",
              }
      security:
        - api_key: [ ]

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string
        address:
          type: string
        avatar:
          type: string

    AuthByWallet:
      type: object
      properties:
        timestamp:
          type: integer
        wallet_addr:
          type: string
        signature:
          type: string
        type:
          type: string
          enum:
            - wallet_connect
            - meta_mask
            - okx
            - unipass_std
            - unipass_eth

  requestBodies:
    AuthByWallet:
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/AuthByWallet'
      description: ''
      required: true

  securitySchemes:
    api_key:
      description: >
        For this sample, you can use the api key `special-key` to test the
        authorization filters.
      type: apiKey
      name: X-Session-Token
      in: header